Bij AES en chacha20 is het belangrijk dat de nonce (IV) niet herbruikt wordt. Als dit wel gedaan wordt dan kan de plain text achterhaald worden. https://news.ycombinator.com/item?id=9561816 

vb. 

p1 = gekende plaintext 
p2 = onbekende plaintext
k = key

de encrypted messages zijn:
c1 = p1 xor k
c2 = p2 xor k 

=> c1 xor c2 	= p1 xor p2 xor k xor k 
		= p1 xor p2

als we p1 kennen en p2 willen achterhalen 
kunnen we doen door p1 xor p1 xor p2 of -> (c1 xor c2) xor p1

zowel c1, c2 als p1 zijn gekend. 
We kunnen de waarde van de flag achterhalen met volgend python script:

import codecs

def byte_xor(ba1, ba2):
    return bytes([_a ^ _b for _a, _b in zip(ba1, ba2)])

message = b"Our counter agencies have intercepted your messages and a lot "
message += b"of your agent's identities have been exposed. In a matter of "
message += b"days all of them will be captured"

enc_msg = "7aa34395a258f5893e3db1822139b8c1f04cfab9d757b9b9cca57e1df33d093f07c7f06e06bb6293676f9060a838ea138b6bc9f20b08afeb73120506e2ce7b9b9dcd9e4a421584cfaba2481132dfbdf4216e98e3facec9ba199ca3a97641e9ca9782868d0222a1d7c0d3119b867edaf2e72e2a6f7d344df39a14edc39cb6f960944ddac2aaef324827c36cba67dcb76b22119b43881a3f1262752990"
enc_flag = "7d8273ceb459e4d4386df4e32e1aecc1aa7aaafda50cb982f6c62623cf6b29693d86b15457aa76ac7e2eef6cf814ae3a8d39c7"


bmsg = codecs.decode(enc_msg, 'hex_codec')
bflag = codecs.decode(enc_flag, 'hex_codec')

print(byte_xor(byte_xor(bmsg, bflag), message))



